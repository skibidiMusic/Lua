local UserInputService = game:GetService("UserInputService")
-- This script was generated by Hydroxide's RemoteSpy: https://github.com/Upbolt/Hydroxide

-- This script was generated by Hydroxide's RemoteSpy: https://github.com/Upbolt/Hydroxide

local ohTable1 = {
	["Charge"] = 1,
	["Action"] = "Spike",
	["SpecialCharge"] = 0,
	["TiltDirection"] = 0, 1, 0,
	["BallId"] = 271,
	["MoveDirection"] = -0, 0, 0,
	["From"] = "Client",
	["HitboxSize"] = 7.5, 8.904999732971191, 6.4710001945495605,
	["LookVector"] = -0.11155342310667038, 1.3751609628798178e-08, 0.9937584400177002
}

game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.BallService.RF.Interact:InvokeServer(ohTable1)

local ohTable1 = {
	["Charge"] = 1,
	["Action"] = "Spike",
	["SpecialCharge"] = 0.9921694838188317,
	["TiltDirection"] = 0, 1, 0,
	["BallId"] = 72746008624,
	["MoveDirection"] = -0.0534561425447464, 1.4456306018928444e-07, -0.9985702037811279,
	["From"] = "Client",
	["HitboxSize"] = 7.5, 8.904999732971191, 6.4710001945495605,
	["LookVector"] = -0.9995639324188232, -9.726828409384325e-08, 0.029528645798563957
}

game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.BallService.RF.Interact:InvokeServer(ohTable1)


local function rotateTowardsXZ(lookVector, tiltVector, maxAngleDegrees)
	local lookXZ = Vector3.new(lookVector.X, 0, lookVector.Z)
	local tiltXZ = Vector3.new(tiltVector.X, 0, tiltVector.Z)

	if lookXZ.Magnitude == 0 or tiltXZ.Magnitude == 0 then
		return lookVector
	end

	lookXZ = lookXZ.Unit
	tiltXZ = tiltXZ.Unit

	local dot = lookXZ:Dot(tiltXZ)
	local angle = math.acos(math.clamp(dot, -1, 1))

	if math.deg(angle) <= maxAngleDegrees then
		return Vector3.new(tiltVector.X, lookVector.Y, tiltVector.Z).Unit
	end

	local cross = lookXZ:Cross(tiltXZ).Y
	local direction = if cross >= 0 then 1 else -1

	local angleToRotate = math.rad(maxAngleDegrees) * direction

	local rotatedXZ = (CFrame.Angles(0, angleToRotate, 0) * lookXZ)

	return Vector3.new(rotatedXZ.X, lookVector.Y, rotatedXZ.Z).Unit
end

local ENABLED = true
local MAX_ANGLE = 45

local old;
old = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local args = {...}
    if  not checkcaller() then
        if getnamecallmethod() == "InvokeServer" and typeof(self) == "Instance" and self.ClassName == "RemoteFunction" and self.Name == "Interact" then
            local t = args[1]
            if typeof(t) == "table" and rawget(t, "Action") == "Spike" and rawget(t, "LookVector") ~= nil and rawget(t, "TiltDirection") ~= nil then
                local lookVector = rotateTowardsXZ(rawget(t, "LookVector"), rawget(t, "TiltDirection"), MAX_ANGLE)
                rawset(t, "LookVector", lookVector)
            end
        end
    end
    return old(self, table.unpack(args))
end))

game.UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local Janitor = require(path.to.Janitor) -- Update this path to your actual Janitor module

local localPlayer = Players.LocalPlayer
local court = workspace:WaitForChild("Court")

local toggleEnabled = false
local enemyCylinders = {}
local courtHighlight = nil
local enemyHighlightModel = nil
local janitor = Janitor.new()

local function createHighlightModel()
	enemyHighlightModel = Instance.new("Model")
	enemyHighlightModel.Name = "EnemyHighlights"
	enemyHighlightModel.Parent = workspace
	janitor:Add(enemyHighlightModel)
end

local function createCourtHighlight()
	local highlightPart = Instance.new("Part")
	highlightPart.Name = "CourtHighlightPart"
	highlightPart.Anchored = true
	highlightPart.CanCollide = false
	highlightPart.Transparency = 1
	highlightPart.Parent = enemyHighlightModel

	local courtPos = court.Position
	local halfZ = court.Size.Z / 2
	local newPos = courtPos

	if localPlayer.Team and localPlayer.Team.Index == 1 then
		newPos = Vector3.new(courtPos.X, courtPos.Y + 0.1, courtPos.Z + (halfZ / 2))
	elseif localPlayer.Team and localPlayer.Team.Index == 2 then
		newPos = Vector3.new(courtPos.X, courtPos.Y + 0.1, courtPos.Z - (halfZ / 2))
	end

	highlightPart.Size = Vector3.new(court.Size.X, court.Size.Y, halfZ)
	highlightPart.CFrame = CFrame.new(newPos)

	local hl = Instance.new("Highlight")
	hl.Adornee = highlightPart
	hl.FillColor = Color3.new(1, 1, 0)
	hl.OutlineColor = Color3.new(1, 1, 1)
	hl.FillTransparency = 0.5
	hl.OutlineTransparency = 0.5
	hl.DepthMode = Enum.HighlightDepthMode.Occluded
	hl.Parent = highlightPart

	courtHighlight = highlightPart
	janitor:Add(highlightPart)
end

local function createEnemyCylinder(player)
	if player == localPlayer then return nil end
	if localPlayer.Team and player.Team and player.Team == localPlayer.Team then return nil end

	local multiplier = player:GetAttribute("GameDiveSpeedMultiplier") or 1
	local radius = 10 * multiplier

	local cylinder = Instance.new("Part")
	cylinder.Shape = Enum.PartType.Cylinder
	cylinder.Name = player.Name .. "_HighlightCylinder"
	cylinder.Anchored = true
	cylinder.CanCollide = false
	cylinder.Color = Color3.new(1, 0, 0)
	cylinder.Transparency = 0.5
	cylinder.Size = Vector3.new(radius * 2, 1, radius * 2)
	cylinder.Parent = enemyHighlightModel

	enemyCylinders[player] = cylinder
	janitor:Add(cylinder)

	return cylinder
end

local function updateEnemyCylinder(player)
	if not enemyCylinders[player] then
		createEnemyCylinder(player)
	end

	local cyl = enemyCylinders[player]
	if cyl and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
		local hrp = player.Character.HumanoidRootPart
		cyl.CFrame = CFrame.new(hrp.Position.X, court.Position.Y + court.Size.Y + 0.5, hrp.Position.Z) * CFrame.Angles(math.rad(90), 0, 0)
	end
end

local function removeEnemyCylinder(player)
	local cyl = enemyCylinders[player]
	if cyl then
		cyl:Destroy()
		enemyCylinders[player] = nil
	end
end

local function setup()
	createHighlightModel()
	createCourtHighlight()

	janitor:Add(RunService.RenderStepped:Connect(function()
		for _, player in ipairs(Players:GetPlayers()) do
			if player ~= localPlayer then
				if localPlayer.Team and player.Team and player.Team ~= localPlayer.Team then
					updateEnemyCylinder(player)
				else
					removeEnemyCylinder(player)
				end
			end
		end
	end), "Disconnect")

	janitor:Add(Players.PlayerAdded:Connect(function(player)
		local charConn
		charConn = player.CharacterAdded:Connect(function()
			task.wait(0.5)
			if toggleEnabled and localPlayer.Team and player.Team and player.Team ~= localPlayer.Team then
				updateEnemyCylinder(player)
			end
		end)
		janitor:Add(charConn, "Disconnect")
	end), "Disconnect")

	janitor:Add(Players.PlayerRemoving:Connect(removeEnemyCylinder), "Disconnect")
end

local function toggle(on)
	if on then
		janitor:Cleanup()
		enemyCylinders = {}
		janitor = Janitor.new()
		setup()
	else
		janitor:Cleanup()
		enemyCylinders = {}
		courtHighlight = nil
		enemyHighlightModel = nil
	end
end

UserInputService.InputBegan:Connect(function(input, gp)
	if not gp and input.KeyCode == Enum.KeyCode.H then
		toggleEnabled = not toggleEnabled
		toggle(toggleEnabled)
	end
end)

toggleEnabled = true
toggle(true)


for _, v in getloadedmodules() do
	if v.Name == "PlayerModule" then
		local playerModule = require(v)
		local cameras = playerModule.cameras

		print(getrawmetatable(cameras), cameras)

	end
end

-- This script was generated by Hydroxide's RemoteSpy: https://github.com/Upbolt/Hydroxide

local ohTable1 = {
	["Charge"] = 1,
	["Action"] = "Block",
	["SpecialCharge"] = 2,
	["TiltDirection"] = -0.757658839225769, 1, -0.6526508331298828,
	["BallId"] = 72746009680,
	["MoveDirection"] = 0, 0, 0,
	["Key"] = "Block14839853",
	["From"] = "Client",
	["HitboxSize"] = 6.5, 9.904999732971191, 6.052999973297119,
	["LookVector"] = -0.757658839225769, 5.578635509095875e-08, -0.6526508331298828
}

game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.7.0"].knit.Services.BallService.RF.Interact:InvokeServer(ohTable1)